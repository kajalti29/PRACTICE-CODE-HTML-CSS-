
# üìå HTML Interview Questions

### 1. What is the difference between HTML and HTML5?

‚úÖ **Answer:**

* HTML is the standard markup language for web pages.
* HTML5 is the latest version with new semantic elements (`<header>`, `<section>`, `<article>`, etc.), multimedia support (`<audio>`, `<video>`), canvas/SVG, local storage, geolocation, and form controls.

-----------------------------------------------------------------------------------------------------------------------------------------

### 2. What are semantic tags in HTML?

‚úÖ **Answer:**
Semantic tags describe the meaning of the content.
Examples:

```html
<header> - for page header
<nav> - for navigation links
<main> - main content
<section> - a section of content
<article> - independent content (like a blog post)
<footer> - page footer
```

------------------------------------------------------------------------------------------------------------------------------------------

### 3. Difference between `id` and `class` in HTML?

‚úÖ **Answer:**

* `id` is unique (used once in a page).
* `class` can be used multiple times.
  Example:

```html
<p id="unique">Hello</p>
<p class="highlight">World</p>
```

------------------------------------------------------------------------------------------------------------------------------------------------------------------

### 4. What is the difference between inline, block, and inline-block elements?

‚úÖ **Answer:**

* **Block:** takes full width (`<div>`, `<p>`, `<h1>`).
* **Inline:** takes only content width (`<span>`, `<a>`).
* **Inline-block:** acts like inline but allows margin/padding.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 5. Difference between LocalStorage, SessionStorage, and Cookies?

‚úÖ **Answer:**

* **LocalStorage:** stores data permanently in browser (until cleared).
* **SessionStorage:** stores data until the browser tab is closed.
* **Cookies:** small data stored in browser + sent to server with each request.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

# üìå CSS Interview Questions

### 1. Difference between relative, absolute, fixed, and sticky positioning?

‚úÖ **Answer:**

* **Relative:** moves element relative to its normal position.
* **Absolute:** positioned relative to nearest positioned ancestor.
* **Fixed:** stays in same position even when scrolling.
* **Sticky:** behaves like relative but becomes fixed when you scroll past it.

Relative: ‡§Ö‡§™‡§®‡•Ä ‡§®‡•â‡§∞‡•ç‡§Æ‡§≤ ‡§™‡•ã‡§ú‡§º‡§ø‡§∂‡§® ‡§∏‡•á ‡§∂‡§ø‡§´‡•ç‡§ü ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
Absolute: ‡§Ö‡§™‡§®‡•á parent (‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç position ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•ã) ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§∏‡•á‡§ü ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
Fixed: ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ ‡§´‡§ø‡§ï‡•ç‡§∏ ‡§∞‡§π‡§§‡§æ ‡§π‡•à (‡§∏‡•ç‡§ï‡•ç‡§∞‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§≠‡•Ä)‡•§
Sticky: ‡§∏‡•ç‡§ï‡•ç‡§∞‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§ä‡§™‡§∞ ‡§ö‡§ø‡§™‡§ï ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

--------------------------------------------------------------------------------------------------------------------------------------------------------------

### 2. Difference between `em`, `rem`, `%`, `px` in CSS?

‚úÖ **Answer:**

* `px`: fixed pixels.
* `em`: relative to parent font-size.
* `rem`: relative to root (html) font-size.
* `%`: relative to parent element.

--------------------------------------------------------------------------------------------------------------------------------------------------------------

### 3. What is the difference between inline, internal, and external CSS?

‚úÖ **Answer:**

* **Inline CSS:** inside tag using `style`.
* **Internal CSS:** inside `<style>` in `<head>`.
* **External CSS:** in a separate `.css` file linked via `<link>`.

--------------------------------------------------------------------------------------------------------------------------------------------------------------

### 4. Difference between relative units (`em`, `rem`) and absolute units (`px`, `pt`)?

‚úÖ **Answer:**

* Absolute units don‚Äôt scale (px, pt).
* Relative units scale with screen size (em, rem, %).

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 5. What is the difference between Flexbox and Grid?

‚úÖ **Answer:**

* **Flexbox:** one-dimensional layout (row OR column).
* **Grid:** two-dimensional layout (rows AND columns).

------------------------------------------------------------------------------------------------------------------------------------------------------------------

# üìå Practical Coding Questions

### Q1: How do you center a div in CSS?(Div ‡§ï‡•ã ‡§∏‡•á‡§Ç‡§ü‡§∞ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?)

‚úÖ **Answer:**

```css
.parent {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

### Q2: Create a responsive image.

‚úÖ **Answer:**

```css
img {
  max-width: 100%;
  height: auto;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

### Q3: Create a sticky navbar using CSS.

‚úÖ **Answer:**

```css
nav {
  position: sticky;
  top: 0;
  background: #fff;
  padding: 10px;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Q4: Difference between `relative` and `absolute` position with example.

‚úÖ **Answer:**

```html
<div class="parent">
  Parent
  <div class="child">Child</div>
</div>
```

```css
.parent { position: relative; width: 200px; height: 200px; background: lightblue; }
.child  { position: absolute; bottom: 10px; right: 10px; background: orange; }
```

------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Q5: How to create a CSS gradient background?

‚úÖ **Answer:**

```css
body {
  background: linear-gradient(to right, #ff7e5f, #feb47b);
}
```---------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Difference between Attributes and Properties?

‚úÖ Attribute ‚Üí Written in the HTML tag (example: <input type="text">).
‚úÖ Property ‚Üí The DOM object‚Äôs value in JavaScript (example: input.value = "abc").

----------------------------------------------------------------------------------------------------------
3. Difference between <span> and <div>?
‚úÖ <span> ‚Üí Inline element.
‚úÖ <div> ‚Üí Block element.

---------------------------------------------------------------------------------------------------------------
4. What is an <iframe>?
‚úÖ ‡§ï‡§ø‡§∏‡•Ä ‡§î‡§∞ ‡§µ‡•á‡§¨‡§™‡•á‡§ú ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§™‡•á‡§ú ‡§Æ‡•á‡§Ç embed ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
‚úÖ Used to embed another webpage inside the current page.

--------------------------------------------------------------------------------------------------------------------

5.Forms ‡§Æ‡•á‡§Ç GET ‡§î‡§∞ POST method ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞?

‚úÖ GET: ‡§°‡•á‡§ü‡§æ URL ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§§‡§æ ‡§π‡•à, ‡§õ‡•ã‡§ü‡§æ ‡§î‡§∞ non-secure‡•§
‚úÖ POST: ‡§°‡•á‡§ü‡§æ URL ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§ñ‡§§‡§æ, secure ‡§î‡§∞ ‡§¨‡§°‡§º‡§æ ‡§°‡•á‡§ü‡§æ ‡§≠‡•á‡§ú ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
   GET: Data is visible in the URL, less secure, limited size.
‚úÖ POST: Data is hidden from URL, more secure, can send large data.

----------------------------------------------------------------------------------------------------------------
6. HTML5 ‡§ï‡•á ‡§®‡§è Input Types?
‚úÖ email, url, date, time, number, range, color, search
---------------------------------------------------------------------------------------------------------------

7. <link> ‡§î‡§∞ <a> ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞?
‚úÖ <link> ‚Üí external resource (CSS, favicon) ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
‚úÖ <a> ‚Üí hyperlink ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§

-----------------------------------------------------------------------------------------------------------------

### 8. Progressive Enhancement ‡§î‡§∞ Graceful Degradation?

‚úÖ **Progressive Enhancement:** ‡§™‡§π‡§≤‡•á basic features, ‡§´‡§ø‡§∞ modern browsers ‡§ï‡•á ‡§≤‡§ø‡§è advanced features add ‡§ï‡§∞‡§®‡§æ‡•§
‚úÖ **Graceful Degradation:** ‡§™‡§π‡§≤‡•á advanced version ‡§¨‡§®‡§æ‡§®‡§æ ‡§î‡§∞ ‡§™‡•Å‡§∞‡§æ‡§®‡•á browsers ‡§Æ‡•á‡§Ç ‡§â‡§∏‡§ï‡§æ simplified version ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------
# üé® CSS Questions with Answers:-
======================================>

### 2. Pseudo-classes ‡§î‡§∞ Pseudo-elements ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞?

‚úÖ **Pseudo-class:** ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•Ä state (‡§ú‡•à‡§∏‡•á `:hover`, `:nth-child(2)`)
‚úÖ **Pseudo-element:** ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•á part ‡§™‡§∞ effect ‡§°‡§æ‡§≤‡§§‡§æ ‡§π‡•à (`::before`, `::after`)

-----------------------------------------------------------------------------------------------------------------------

### 3. Z-index ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?

‚úÖ Elements ‡§ï‡•ã stack ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (‡§ï‡•å‡§® ‡§ä‡§™‡§∞ ‡§î‡§∞ ‡§ï‡•å‡§® ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§ñ‡•á‡§ó‡§æ)‡•§
Default value = 0, ‡§¨‡§°‡§º‡§æ z-index ‚Üí ‡§ä‡§™‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§¶‡•á‡§ó‡§æ‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 4. `inline`, `inline-block`, `block` ‡§Æ‡•á‡§Ç ‡§´‡§∞‡•ç‡§ï?

* **block** ‚Üí ‡§™‡•Ç‡§∞‡•Ä ‡§ö‡•å‡§°‡§º‡§æ‡§à ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
* **inline** ‚Üí ‡§∏‡§ø‡§∞‡•ç‡§´ content ‡§ï‡•Ä ‡§ú‡§ó‡§π ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
* **inline-block** ‚Üí inline ‡§∞‡§π‡§§‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® block properties (width, height, margin, padding) use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 5. Relative units ‡§î‡§∞ Absolute units ‡§Æ‡•á‡§Ç ‡§´‡§∞‡•ç‡§ï?

‚úÖ **Absolute (px, pt):** fix ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§
‚úÖ **Relative (%, em, rem):** parent ‡§Ø‡§æ root size ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§¨‡§¶‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 6. Media Queries ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

‚úÖ Responsive design ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (screen size ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á CSS apply ‡§ï‡§∞‡§®‡§æ)‡•§

```css
@media (max-width: 768px) {
  body { background: lightblue; }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

### 7. CSS Preprocessors (SASS/LESS) ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

‚úÖ CSS ‡§ï‡•ã advanced ‡§¨‡§®‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á tools ‚Üí variables, nesting, mixins allow ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

--------------------------------------------------------------------------------------------------------------------------------------------------------------

### 8. `transform`, `transition`, ‡§î‡§∞ `animation` ‡§ï‡§æ ‡§´‡§∞‡•ç‡§ï?

* **transform:** element ‡§ï‡•ã move/scale/rotate/skew ‡§ï‡§∞‡§®‡§æ‡•§
* **transition:** ‡§è‡§ï state ‡§∏‡•á ‡§¶‡•Ç‡§∏‡§∞‡•Ä state ‡§Æ‡•á‡§Ç smooth change‡•§
* **animation:** keyframes ‡§ï‡•á ‡§∏‡§æ‡§• complex movements‡•§

------------------------------------------------------------------------------------------------------------------------------------------------------------------

### 9. `overflow` property ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§π‡§æ‡§Å ‡§π‡•ã‡§§‡§æ ‡§π‡•à?

‚úÖ ‡§ú‡§¨ content container ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§ö‡§≤‡§æ ‡§ú‡§æ‡§è‡•§
Values: `visible`, `hidden`, `scroll`, `auto`

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 10. Responsive Web Design (RWD) ‡§ï‡•á 3 principles?
1. Fluid Grid (percentage-based layout)
2. Flexible Images (responsive images)
3. Media Queries (screen-size specific CSS)

--------------------------------------------------------------------------------------------------------------------------------------------------------------
# üåê Extra HTML Questions with Answers

### 1. What are Semantic tags and why are they important?

**English:** Semantic tags clearly describe the meaning of content (e.g., `<header>`, `<footer>`, `<article>`). They help in SEO and accessibility.
**Hindi:** Semantic tags ‡§ê‡§∏‡•á ‡§ü‡•à‡§ó ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã content ‡§ï‡§æ meaning ‡§¨‡§§‡§æ‡§§‡•á ‡§π‡•à‡§Ç (‡§ú‡•à‡§∏‡•á `<header>`, `<footer>`, `<article>`). ‡§Ø‡•á SEO ‡§î‡§∞ accessibility ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 2. Difference between LocalStorage, SessionStorage, and Cookies?

**English:**

* LocalStorage ‚Üí Stores data permanently (until cleared).
* SessionStorage ‚Üí Stores data until tab/browser is closed.
* Cookies ‚Üí Small data stored, also sent with every server request.

**Hindi:**

* LocalStorage ‚Üí ‡§°‡•á‡§ü‡§æ ‡§π‡§Æ‡•á‡§∂‡§æ store ‡§∞‡§π‡§§‡§æ ‡§π‡•à (‡§ú‡§¨ ‡§§‡§ï manually delete ‡§® ‡§π‡•ã)‡•§
* SessionStorage ‚Üí ‡§°‡•á‡§ü‡§æ tab/browser ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§π‡§ü ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
* Cookies ‚Üí ‡§õ‡•ã‡§ü‡§æ data store ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§π‡§∞ server request ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 3. Difference between `<canvas>` and `<svg>`?

**English:**

* `<canvas>` ‚Üí Pixel-based, good for games/animations.
* `<svg>` ‚Üí Vector-based, good for scalable graphics like logos.

**Hindi:**

* `<canvas>` ‚Üí Pixel-based ‡§π‡•ã‡§§‡§æ ‡§π‡•à, games/animations ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ‡•§
* `<svg>` ‚Üí Vector-based ‡§π‡•ã‡§§‡§æ ‡§π‡•à, scalable graphics (‡§ú‡•à‡§∏‡•á logo) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ‡•§

---------------------------------------------------------------------------------------------------------------------------------------------------------------

### 4. What is Shadow DOM?

**English:** A way to isolate styles and scripts of a component so they don‚Äôt affect outside elements (used in Web Components).
**Hindi:** Shadow DOM component ‡§ï‡§æ style ‡§î‡§∞ script ‡§Ö‡§≤‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§§‡§æ‡§ï‡§ø ‡§¨‡§æ‡§π‡§∞ ‡§µ‡§æ‡§≤‡•á elements ‡§™‡§∞ ‡§Ö‡§∏‡§∞ ‡§® ‡§™‡§°‡§º‡•á (Web Components ‡§Æ‡•á‡§Ç use ‡§π‡•ã‡§§‡§æ ‡§π‡•à)‡•§

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 5. What is a Progressive Web App (PWA)?

**English:** A web app that works like a native app (offline support, installable, push notifications).
**Hindi:** Progressive Web App ‡§è‡§ï web app ‡§π‡•à ‡§ú‡•ã mobile app ‡§ú‡•à‡§∏‡§æ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (offline ‡§ö‡§≤‡§§‡§æ ‡§π‡•à, install ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, push notifications ‡§¶‡•á‡§§‡§æ ‡§π‡•à)‡•§

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

# üé® Extra CSS Questions with Answers

### 1. What is Flexbox and its main properties?

**English:** Flexbox is a CSS layout model for aligning elements in rows/columns.
Main properties: `display:flex`, `justify-content`, `align-items`, `flex-wrap`, `flex-direction`.
**Hindi:** Flexbox ‡§è‡§ï CSS layout system ‡§π‡•à ‡§ú‡§ø‡§∏‡§∏‡•á elements ‡§ï‡•ã row/column ‡§Æ‡•á‡§Ç easily arrange ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
Main properties: `display:flex`, `justify-content`, `align-items`, `flex-wrap`, `flex-direction`.

---------------------------------------------------------------------------------------------------------------------------------------------------------

### 2. What is CSS Grid and how is it different from Flexbox?

**English:** CSS Grid is for two-dimensional layouts (rows + columns). Flexbox is mostly one-dimensional (row OR column).
**Hindi:** CSS Grid 2D layout (row ‡§î‡§∞ column ‡§¶‡•ã‡§®‡•ã‡§Ç) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§ Flexbox 1D layout (row ‡§Ø‡§æ column) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

### 3. Explain Position property (static, relative, absolute, fixed, sticky).

**English:**

* static ‚Üí Default (normal flow).
* relative ‚Üí Moves element relative to itself.
* absolute ‚Üí Positioned relative to parent.
* fixed ‚Üí Stays fixed on screen.
* sticky ‚Üí Acts like relative but sticks when scrolling.

**Hindi:**

* static ‚Üí Default, normal ‡§ú‡§ó‡§π‡•§
* relative ‚Üí ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§ó‡§π ‡§∏‡•á ‡§•‡•ã‡§°‡§º‡§æ move‡•§
* absolute ‚Üí Parent ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á set‡•§
* fixed ‚Üí ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ fixed ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§
* sticky ‚Üí Scroll ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§ö‡§ø‡§™‡§ï ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

### 4. How to make responsive images?

**English:** Use `max-width:100%`, `height:auto`, or HTML attributes like `srcset` and `<picture>` tag.
**Hindi:** Responsive images ‡§ï‡•á ‡§≤‡§ø‡§è `max-width:100%`, `height:auto` ‡§Ø‡§æ HTML ‡§Æ‡•á‡§Ç `srcset` ‡§î‡§∞ `<picture>` tag use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

------------------------------------------------------------------------------------------------------------------------------------------------------------------

### 5. What are CSS Variables?

**English:** Custom properties defined with `--` and reused.
Example:

```css
:root { --main-color: blue; }
div { color: var(--main-color); }
```

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 7. Difference between Inline CSS, Internal CSS, and External CSS?

**English:**

* Inline ‚Üí Written inside element (`style=""`).
* Internal ‚Üí Written inside `<style>` in the same page.
* External ‚Üí Written in a separate CSS file and linked.

**Hindi:**

* Inline ‚Üí Element ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ `style=""` ‡§≤‡§ø‡§ñ‡§§‡•á ‡§π‡•à‡§Ç‡•§
* Internal ‚Üí `<style>` ‡§ü‡•à‡§ó ‡§Æ‡•á‡§Ç ‡§â‡§∏‡•Ä ‡§™‡•á‡§ú ‡§™‡§∞‡•§
* External ‚Üí ‡§Ö‡§≤‡§ó CSS file ‡§¨‡§®‡§æ‡§ï‡§∞ link ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

----------------------------------------------------------------------------------------------------------------------------------------------------------------

### 8. How to make a website mobile-friendly?

**English:**

* Use responsive layout (flexbox, grid).
* Use media queries.
* Use responsive images.
* Avoid fixed widths.

**Hindi:**

* Responsive layout (flexbox, grid) use ‡§ï‡§∞‡•ã‡•§
* Media queries ‡§≤‡§ó‡§æ‡§ì‡•§
* Responsive images use ‡§ï‡§∞‡•ã‡•§
* Fixed width avoid ‡§ï‡§∞‡•ã‡•§


-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------

# üîπ Media Queries (Q\&A)

**Q1. Media query ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?**
üëâ Media queries responsive design ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡•á ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó screen sizes (mobile, tablet, desktop) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡§ó CSS apply ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

**Q2. Mobile-first vs Desktop-first approach?**
üëâ

* **Mobile-first:** ‡§™‡§π‡§≤‡•á ‡§õ‡•ã‡§ü‡•á screen (mobile) ‡§ï‡•á ‡§≤‡§ø‡§è CSS ‡§≤‡§ø‡§ñ‡§§‡•á ‡§π‡•à‡§Ç, ‡§´‡§ø‡§∞ ‡§¨‡§°‡§º‡•á screens ‡§ï‡•á ‡§≤‡§ø‡§è `min-width` ‡§∏‡•á override ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
* **Desktop-first:** ‡§™‡§π‡§≤‡•á ‡§¨‡§°‡§º‡•á screen ‡§ï‡•á ‡§≤‡§ø‡§è CSS ‡§≤‡§ø‡§ñ‡§§‡•á ‡§π‡•à‡§Ç, ‡§´‡§ø‡§∞ ‡§õ‡•ã‡§ü‡•á screens ‡§ï‡•á ‡§≤‡§ø‡§è `max-width` ‡§∏‡•á override ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

**Q3. Common breakpoints ‡§ï‡•å‡§®-‡§ï‡•å‡§® ‡§∏‡•á ‡§π‡•à‡§Ç?**
üëâ Mobile (‚â§480px), Tablet (‚â§768px), Laptop (‚â§1024px), Desktop (‚â•1200px)

---

# üîπ Transitions (Q\&A)

**Q1. Transition ‡§î‡§∞ Animation ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞?**
üëâ Transition ‡§Æ‡•á‡§Ç change ‡§§‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ú‡§¨ ‡§ï‡•ã‡§à user action (hover, click) trigger ‡§ï‡§∞‡•á‡•§ Animation ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§ö‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§î‡§∞ complex movement ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

**Q2. Transition ‡§ï‡•á properties ‡§ï‡•å‡§®-‡§ï‡•å‡§® ‡§∏‡•á ‡§π‡•à‡§Ç?**
üëâ

* `transition-property`
* `transition-duration`
* `transition-timing-function`
* `transition-delay`

**Q3. Transition ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ hover ‡§ï‡§æ ‡§Ö‡§∏‡§∞ ‡§ï‡•à‡§∏‡§æ ‡§π‡•ã‡§ó‡§æ?**
üëâ Property ‡§§‡•Å‡§∞‡§Ç‡§§ change ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡•Ä, smooth effect ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§è‡§ó‡§æ‡•§

---

# üîπ Animations (Q\&A)

**Q1. Transition vs Animation ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§´‡§∞‡•ç‡§ï ‡§π‡•à?**
üëâ Transition ‚Üí simple smooth change, trigger ‡§ö‡§æ‡§π‡§ø‡§è
üëâ Animation ‚Üí auto run, keyframes ‡§∏‡•á complex sequence ‡§¨‡§® ‡§∏‡§ï‡§§‡§æ ‡§π‡•à

**Q2. Keyframes ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?**
üëâ Keyframes animation ‡§ï‡•á steps define ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç (0% ‚Üí start, 100% ‚Üí end)‡•§ ‡§á‡§∏‡§∏‡•á complex animations possible ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

**Q3. `animation-fill-mode: forwards` ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨?**
üëâ Animation ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ final state ‡§ï‡•ã hold ‡§ï‡§∞‡§®‡§æ (element ‡§µ‡§æ‡§™‡§∏ original state ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ‡§è‡§ó‡§æ)‡•§

**Q4. Animation ‡§ï‡•ã infinite ‡§ï‡•à‡§∏‡•á ‡§ö‡§≤‡§æ‡§è‡§Å‡§ó‡•á?**
üëâ `animation-iteration-count: infinite;`

---




