# Strings Details
---

## ðŸ”¹ What is a String?

A **string** is just text inside quotes.

```js
let name = "Kajal";
```

-----------------------------------------------------------------------------------------------------------------------------------------

## ðŸ”¹ Common String Methods

### 1. **length** â†’ gives the number of characters

```js
let str = "Hello";
console.log(str.length);  // 5
```

-----------------------------------------------------------------------------------------------------------------

### 2. **toUpperCase()** â†’ converts to CAPITAL letters

```js
let str = "hello";
console.log(str.toUpperCase());  // "HELLO"
```

--------------------------------------------------------------------------------------------------------------------------------------

### 3. **toLowerCase()** â†’ converts to small letters

```js
let str = "HELLO";
console.log(str.toLowerCase());  // "hello"
```

------------------------------------------------------------------------------------------------------------------------------------

### 4. **trim()** â†’ removes extra spaces from start & end

```js
let str = "   Hi Kajal   ";
console.log(str.trim());  // "Hi Kajal"
```

------------------------------------------------------------------------------------------------------------------------------------

### 5. **includes()** â†’ checks if a word/letter is present

```js
let str = "JavaScript is fun";
console.log(str.includes("fun"));   // true
console.log(str.includes("boring"));// false
```

-------------------------------------------------------------------------------------------------------------------------------------

### 6. **indexOf()** â†’ position of first occurrence

```js
let str = "Hello World";
console.log(str.indexOf("o"));  // 4
```

---------------------------------------------------------------------------------------------------------------------------------------

### 7. **lastIndexOf()** â†’ position of last occurrence

```js
let str = "Hello World";
console.log(str.lastIndexOf("o"));  // 7
```

---------------------------------------------------------------------------------------------------------------------------------------

### 8. **slice(start, end)** â†’ cut out part of string

```js
let str = "JavaScript";
console.log(str.slice(0, 4));  // "Java"
console.log(str.slice(4));     // "Script"
```

------------------------------------------------------------------------------------------------------------------------------------------

### 9. **substring(start, end)** â†’ similar to slice

```js
let str = "Programming";
console.log(str.substring(0, 6));  // "Progra"
```

------------------------------------------------------------------------------------------------------------------------------------------

### 10. **replace("old","new")** â†’ replace text

```js
let str = "I love Python";
console.log(str.replace("Python", "JavaScript"));  
// "I love JavaScript"
```

-------------------------------------------------------------------------------------------------------------------------------------

### 11. **split()** â†’ convert string into array

```js
let str = "apple,banana,grape";
console.log(str.split(","));  
// ["apple", "banana", "grape"]
```

------------------------------------------------------------------------------------------------------------------------------------------

### 12. **concat()** â†’ join two strings

```js
let str1 = "Hello";
let str2 = "World";
console.log(str1.concat(" ", str2));  // "Hello World"
```

### 13. **repeat(n)**  -> Repeats the string n times.

```js
let str = "HI";
console.log(str.repeat(3)); // HI HI HI

------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
# ðŸ”¹ Array Methods in JavaScript 

```js
let arr = [10, 20, 30, 40, 50];
console.log(arr); //10, 20, 30, 40, 50
```

## 1. **length** â†’ gives number of items

```js
console.log(arr.length);  // 5
```

---------------------------------------------------------------------------------------------------------------------------------------

## 2. **push()** â†’ add at end

```js
   let arr = [1, 2, 3];
   arr.push(4);
   console.log(arr); //[1, 2, 3, 4]
```

------------------------------------------------------------------------------------------------------------------------------------------


## 3. **pop()** â†’ remove last item

```js
let arr = [1, 2, 3];
arr.pop();
console.log(arr); //[1, 2,]

```

------------------------------------------------------------------------------------------------------------------------------------------


## 4. **unshift()** â†’ add at start

```js
let arr = [1, 2, 3];
arr.unshift(0);
console.log(arr); //[0, 1, 2, 3]


```

------------------------------------------------------------------------------------------------------------------------------------------


## 5. **shift()** â†’ remove first item

```js
let arr = [1, 2, 3];
arr.shift();
console.log(arr); //[2, 3]
```

------------------------------------------------------------------------------------------------------------------------------------------


## 6. **includes()** â†’ check if item exists

```js
let arr = [1, 2, 3];
console.log(arr.includes(2)); //true
console.log(arr.includes(4)); //false

```

------------------------------------------------------------------------------------------------------------------------------------------


## 7. **indexOf()** â†’ first position of item

```js
let arr = [1, 2, 3, 4, 5];
console.log(arr.indexOf(3)); //2
console.log(arr.indexOf(8)); // -1
```

------------------------------------------------------------------------------------------------------------------------------------------


## 8. **lastIndexOf()** â†’ last position of item

```js
let nums = [10, 20, 30, 20, 40];
console.log(nums.lastIndexOf(20));  // 3
```

------------------------------------------------------------------------------------------------------------------------------------------


## 9. **concat** â†’ convert array â†’ string

```js
let a = [1, 2, 3];
let b = [4, 5, 6];
let c = a.concat(b);
console.log(c);

# output:-

[ 1, 2, 3, 4, 5, 6 ]


```

------------------------------------------------------------------------------------------------------------------------------------------


## 10. **toString()** â†’ convert to string

```js
console.log(arr.toString());  // "10,20,30,40,50"
```

------------------------------------------------------------------------------------------------------------------------------------------


## 11. **slice(start,end)** â†’ copy part

```js
console.log(arr.slice(1,4));  // [20,30,40]
```

------------------------------------------------------------------------------------------------------------------------------------------


## 12. **splice(start, deleteCount, ...items)** â†’ add/remove

```js
arr.splice(2,1,99);  // remove 1 at index 2, add 99
console.log(arr);    // [10,20,99,40,50]
```

------------------------------------------------------------------------------------------------------------------------------------------


## 13. **concat()** â†’ join arrays

```js
let a1 = [1,2],
let a2 = [3,4];
console.log(a1.concat(a2));  // [1,2,3,4]
```

------------------------------------------------------------------------------------------------------------------------------------------


## 14. **reverse()** â†’ reverse array

```js
let arr = [1, 2, 3, 4, 5];
console.log(arr.reverse()); // [ 5, 4, 3, 2, 1 ]

```

------------------------------------------------------------------------------------------------------------------------------------------


## 15. **sort()** â†’ sort items (alphabetical by default)

```js
ðŸ”¹ 2. Numeric Ascending Order (à¤›à¥‹à¤Ÿà¥‡ à¤¸à¥‡ à¤¬à¤¡à¤¼à¥‡)

let numbers = [40, 100, 1, 5, 25, 10];
console.log(numbers.sort((a, b) => a - b));
// [1, 5, 10, 25, 40, 100]
```

-------------------------------------------------------------------------------------------------------------------------------------
```js
ðŸ”¹ 3. Numeric Descending Order (à¤¬à¤¡à¤¼à¥‡ à¤¸à¥‡ à¤›à¥‹à¤Ÿà¥‡)

let numbers = [40, 100, 1, 5, 25, 10];

console.log(numbers.sort((a, b) => b - a));
// [100, 40, 25, 10, 5, 1]
````


------------------------------------------------------------------------------------------------------------------------------------
ðŸ”¹ 4. Strings Sorting

let fruits = ["Banana", "Orange", "Apple", "Mango"];

console.log(fruits.sort());
// ["Apple", "Banana", "Mango", "Orange"]

console.log(fruits.sort().reverse());
// ["Orange", "Mango", "Banana", "Apple"]



------------------------------------------------------------------------------------------------------------------------------------------


## 16. **map()** â†’ 
ðŸ‘‰ It does not change the original array.(But return new arrays ){ye num ko duble karke return karta hai}

```js
let number = [1, 2, 3, 4, 5];

// double each number
let doubled = number.map(num => num * 2);

console.log(doubled);   // [2, 4, 6, 8, 10]
console.log(numbers);   // [1, 2, 3, 4, 5] (original unchanged)
```

------------------------------------------------------------------------------------------------------------------------------------------


## 17. **filter()** â†’ keep items if condition true
ðŸ‘‰ Returns a new array.

```js
let numbers = [1, 2, 3, 4, 5, 6];

// keep only even numbers
let evens = numbers.filter(num => num % 2 === 0);

console.log(evens);   // [2, 4, 6]

```

------------------------------------------------------------------------------------------------------------------------------------------


## 18. **reduce()** â†’ reduce array to single value

```js
let numbers = [1, 2, 3, 4, 5];

// find sum
let sum = numbers.reduce((acc, curr) => acc + curr, 0);

console.log(sum);   // 15

```

------------------------------------------------------------------------------------------------------------------------------------------


## 19. **forEach()** â†’ loop through items

```js
let numbers = [10, 20, 30, 40];

numbers.forEach(function(num){
    console.log(num);
});

```

------------------------------------------------------------------------------------------------------------------------------------------


## 20. **find()** â†’ first item that matches

```js
console.log(arr.find(x => x > 25));
```

------------------------------------------------------------------------------------------------------------------------------------------


## 21. **findIndex()** â†’ index of first match

```js
console.log(arr.findIndex(x => x > 25));
```

------------------------------------------------------------------------------------------------------------------------------------------




