
## üîπ 1. What is a Function?

A **function** is a block of code that performs a specific task.
üëâ We write it once and reuse it many times.
üëâ It improves code reusability, readability, and maintainability.

---

## üîπ 2. Syntax of a Function

```js
function functionName(parameters) {
  // code to be executed
  return value;  // (optional)
}
```

------------------------------------------------------------------------------------------------------------------------------------------

## üîπ 3. Types of Functions in JavaScript

### ‚úÖ (a) Function Declaration (Named Function)

```js
function greet() {
  console.log("Hello World!");
}
greet(); // calling the function
```

------------------------------------------------------------------------------------------------------------------------------------------


### ‚úÖ (b) Function with Parameters

```js
function add(a, b) {
  return a + b;
}
console.log(add(5, 3)); // 8
```

------------------------------------------------------------------------------------------------------------------------------------------


### ‚úÖ (c) Function Expression

(A function assigned to a variable)

```js
let multiply = function (x, y) {
  return x * y;
};
console.log(multiply(4, 5)); // 20
```

------------------------------------------------------------------------------------------------------------------------------------------


### ‚úÖ (d) Arrow Function (ES6)

(Shorter syntax)

```js
let square = (n) => n * n;
console.log(square(6)); // 36
```

------------------------------------------------------------------------------------------------------------------------------------------

Arrow function:

```js
const add = (a, b) => a + b;
console.log(add(2, 3)); // 5
```
-------------------------------------------------------------------------------------------------------------------------------------------
## this:-
Hum this ka use karte hain taaki function ke andar object ka naam hardcode na karna pade, aur code reusable + flexible ho jaye.

(this keyword is used to refer to the current object.It helps us avoid hardcoding object names, makes functions reusable, and is very useful in objects, constructors, classes, and event handling.
)


```js
const person = {
  name: "Priya",
  normalFunc: function() {
    console.log(this.name);
  }
};
person.normalFunc(); // Priya ‚úÖ

------------------------------------------------------------------------------------------------------------------------------------------
  
let user = {
  name: "Kajal",
  sayHi: function() {
    console.log("Hi " + this.name);
  }
};
user.sayHi(); // Hi Kajal
------------------------------------------------------------------------------------------------------------------------------------------


``js
let user = {
  name:"kaju",
  age :21,
  info : function(){
    console.log(this.name + "is" + this.age + "years old);
  }
};

user.infor();
```
------------------------------------------------------------------------------------------------------------------------------------------

*Closure:-
        ‚ÄúA closure is a function that remembers its lexical scope, even when it is executed outside of that scope.‚Äù(‚ÄúClosure ‡§è‡§ï ‡§ê‡§∏‡§æ function ‡§π‡•à ‡§ú‡•ã ‡§Ö‡§™‡§®‡•á lexical scope (‡§Ø‡§æ‡§®‡§ø ‡§ú‡§ø‡§∏ ‡§ú‡§ó‡§π ‡§™‡§∞ ‡§µ‡•ã ‡§¨‡§®‡§æ ‡§•‡§æ, ‡§â‡§∏‡§ï‡•á variables ‡§î‡§∞ environment) ‡§ï‡•ã ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à, ‡§≠‡§≤‡•á ‡§π‡•Ä ‡§â‡§∏‡•á ‡§â‡§∏ scope ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ execute ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡•§‚Äù)

Use of Closure:-
Closure ‡§ï‡§æ use private data ‡§¨‡§®‡§æ‡§®‡•á, state ‡§ï‡•ã preserve ‡§ï‡§∞‡§®‡•á, callbacks/event handlers ‡§Æ‡•á‡§Ç values ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§®‡•á ‡§î‡§∞ modular code ‡§≤‡§ø‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§


Outer Function ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:-
.‡§ú‡§¨ ‡§π‡§Æ ‡§è‡§ï function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§¶‡•Ç‡§∏‡§∞‡§æ function ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç:
.‡§¨‡§æ‡§π‡§∞ ‡§µ‡§æ‡§≤‡§æ function üëâ Outer Function
.‡§Ö‡§Ç‡§¶‡§∞ ‡§µ‡§æ‡§≤‡§æ function üëâ Inner Function

üëâ ‡§î‡§∞ ‡§ú‡§¨ inner function, outer function ‡§ï‡•á variables ‡§ï‡•ã access ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡•á Closure ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§

Closure Code ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á Steps:-

1.‡§è‡§ï Outer Function ‡§¨‡§®‡§æ‡§ì‡•§
2.Outer function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§ï‡•ã‡§à variable declare ‡§ï‡§∞‡•ã‡•§
3.Outer function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§è‡§ï Inner function ‡§¨‡§®‡§æ‡§ì‡•§
4.Inner function ‡§â‡§∏ variable ‡§ï‡•ã use ‡§ï‡§∞‡•á‡•§
5.Inner function ‡§ï‡•ã return ‡§ï‡§∞ ‡§¶‡•ã‡•§
6.Outer function ‡§ï‡•ã call ‡§ï‡§∞‡§ï‡•á result use ‡§ï‡§∞‡•ã‡•§

#Basic Closure:-
```js
function outer() {          // Step 1
    let a = 10;             // Step 2 (outer variable)

    function inner() {      // Step 3
        console.log(a);     // Step 4 (use outer variable)
    }

    return inner;           // Step 5
}

let myFunc = outer();       // Step 6
myFunc();  // Output: 10

```
----------------------------------------------------------------------------------------------------------------------------------------
1. Objects in JavaScript

üëâ Objects basically key‚Äìvalue pairs hote ‡§π‡•à‡§Ç.
‡§π‡§∞ key ek property ‡§Ø‡§æ method ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§

```js
let person = {
    name: "Kajal",
    age: 22,
    city: "Indore",
    
    // Method (function inside object)
    greet: function() {
        return `Hello, my name is ${this.name}`;
    }
};

console.log(person.name);   // Property access ‚Üí Kajal
console.log(person.greet()); // Method call ‚Üí Hello, my name is Kajal

--------------------------------------------------------------------------------------------------------------------------------------
#Methods of Objects:-

Object methods :- keys(), values(), entries(), assign() etc.
Example:-
let student = {
    id: 101,
    name: "Aman"
};

// üîπ Object.keys() ‚Üí sabhi keys return karega
      console.log(Object.keys(student));  
; // ["id", "name"]

// üîπ Object.values() ‚Üí sabhi values return karega
      console.log(Object.values(student));  
;   [101, "Aman"]

// üîπ Object.entries() ‚Üí [key, value] pairs return karega
      console.log(Object.entries(student));  
; // [["id", 101], ["name", "Aman"]]

// üîπ Object.assign() ‚Üí ek object ke properties dusre me copy karega
let extra = { age: 20 };
Object.assign(student, extra);
console.log(student); 
; // { id: 101, name: "Aman", age: 20 }
```
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
4.Hoisting in JavaScript:-

Hoisting is JavaScript‚Äôs behavior of moving variable and function declarations to the top of their scope before code execution.

Key Points:

Only declarations are hoisted, not initializations.

var is hoisted and initialized as undefined.

### **1Ô∏è‚É£ Variable Hoisting**

* **var** ‚Üí ‡§ï‡•á‡§µ‡§≤ declaration hoist ‡§π‡•ã‡§§‡•Ä ‡§π‡•à, **initialization ‡§®‡§π‡•Ä‡§Ç**‡•§
  Access ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ declaration ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‚Üí `undefined`

```js
console.log(a); // undefined
var a = 5;
```

* **let ‡§î‡§∞ const** ‚Üí hoisted ‡§§‡•ã ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® **Temporal Dead Zone (TDZ)** ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ Declaration ‡§∏‡•á ‡§™‡§π‡§≤‡•á access ‚Üí `ReferenceError`

```javascript
console.log(b); // ReferenceError
let b = 10;
```


### **2Ô∏è‚É£ Function Hoisting**

* **Function Declaration** ‚Üí ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π hoist ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§ Call ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à declaration ‡§∏‡•á ‡§™‡§π‡§≤‡•á‡•§

```js
greet(); // "Hello"
function greet() { console.log("Hello"); 

}

* **Function Expression** ‚Üí ‡§ï‡•á‡§µ‡§≤ variable hoist ‡§π‡•ã‡§§‡§æ ‡§π‡•à, function ‡§®‡§π‡•Ä‡§Ç‡•§ Call ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ **TypeError** ‡§Ü‡§§‡•Ä ‡§π‡•à‡•§


sayHi(); // TypeError
var sayHi = function() { console.log("Hi");
 };

```
------------------------------------------------------------------------------------------------------------------------------------------

## Callback function:-A callback function is a function that you pass as an argument to another function, and it is executed after some operation is completed. 
```js
function greet(name, callback) {
    console.log('Hello ' + name);
    callback(); // calling the callback function
}

function sayGoodbye() {
    console.log('Goodbye!');
}

greet('Kajal', sayGoodbye);

```
------------------------------------------------------------------------------------------------------------------------------------------
## Synchronous (‡§∏‡§ø‡§Ç‡§ï)

1.Synchronous ‡§Æ‡•á‡§Ç code line by line execute ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
2.‡§è‡§ï line ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡•Ä ‡§Ö‡§ó‡§≤‡•Ä line execute ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§
3.‡§á‡§∏‡•á blocking code ‡§≠‡•Ä ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§

Example:
```js
console.log("Step 1");
console.log("Step 2");
console.log("Step 3");
```
# Output
Step 1
Step 2
Step 3
------------------------------------------------------------------------------------------------------------------------------------------
Example with function:-

```js
function greet() {
    console.log("Hello!");
}

function sayBye() {
    console.log("Goodbye!");
}

greet();
sayBye();
```
## Output:
Hello!
Goodbye!

------------------------------------------------------------------------------------------------------------------------------------------
2Ô∏è‚É£ Asynchronous (‡§Ö‡§∏‡§ø‡§Ç‡§ï)

Asynchronous ‡§Æ‡•á‡§Ç code immediately ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§¨‡§ø‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä operation ‡§ï‡•á complete ‡§π‡•ã‡§®‡•á ‡§ï‡§æ wait ‡§ï‡§ø‡§è‡•§
‡§á‡§∏‡•á non-blocking code ‡§≠‡•Ä ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§Ö‡§ï‡•ç‡§∏‡§∞ API calls, timers, ‡§Ø‡§æ database calls ‡§Æ‡•á‡§Ç use ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

Example with setTimeout:

```js
console.log("Step 1");

setTimeout(function() {
    console.log("Step 2 (after 2 seconds)");
}, 2000);
console.log("Step 3");

## Output
Step 1
Step 3
Step 2 (after 2 seconds)

------------------------------------------------------------------------------------------------------------------------------------------

1Ô∏è‚É£ setTimeout()

setTimeout ‡§ï‡§ø‡§∏‡•Ä function ‡§ï‡•ã ‡§è‡§ï ‡§¨‡§æ‡§∞ delay ‡§ï‡•á ‡§¨‡§æ‡§¶ execute ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Syntax:

setTimeout(function, delay_in_milliseconds);

Example:-
console.log("Start");

setTimeout(function() {
    console.log("This runs after 2 seconds");
}, 2000);

console.log("End");

 # Output

Start
End
This runs after 2 seconds

------------------------------------------------------------------------------------------------------------------------------------------

2Ô∏è‚É£ setInterval()

setInterval ‡§ï‡§ø‡§∏‡•Ä function ‡§ï‡•ã ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ interval ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§ö‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§

Syntax:

setInterval(function, interval_in_milliseconds);

Example:-
let count = 0;

let intervalId = setInterval(function() {
    count++;
    console.log("Count: " + count);
    if(count === 5) {
        clearInterval(intervalId); // Stop after 5 times
    }
}, 1000);

# Output (‡§π‡§∞ 1 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç):
Count: 1
Count: 2
Count: 3
Count: 4
Count: 5


------------------------------------------------------------------------------------------------------------------------------------------

1Ô∏è‚É£ Promise ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

Promise ‡§è‡§ï object ‡§π‡•à ‡§ú‡•ã future ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡•Ä asynchronous operation ‡§ï‡§æ result handle ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

‡§á‡§∏‡•á ‚Äú‡§Ö‡§≠‡•Ä ‡§§‡•ã result ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‚Äù ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

Promise ‡§ï‡•á 3 state ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç:

1.Pending ‚Äì ‡§Ö‡§≠‡•Ä operation complete ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü

2.Resolved / Fulfilled ‚Äì operation ‡§∏‡§´‡§≤ ‡§π‡•Å‡§Ü

3.Rejected ‚Äì operation fail ‡§π‡•Å‡§Ü


let promise = new Promise(function(resolve, reject) {
    // asynchronous code
    let success = true;

    if(success) {
        resolve("Operation Successful!");
    } else {
        reject("Operation Failed!");
    }
});
--------------------------------------------------------------------------------------------------------------------------------------------

3Ô∏è‚É£ Using Promise with .then() and .catch()

let promise = new Promise(function(resolve, reject) {
    let success = true;

    setTimeout(function() {
        if(success) {
            resolve("Data received successfully!");
        } else {
            reject("Error in fetching data!");
        }
    }, 2000);
});

promise
.then(function(result) {
    console.log(result); // success message
})
.catch(function(error) {
    console.log(error); // error message
});

Output (2 seconds delay):-
Data received successfully!


-----------------------------------------------------------------------------------------------------------------------------------------

































































































































































































### ‚úÖ (e) Anonymous Function

(Function without a name, mostly used as callbacks)

```js
setTimeout(function() {
  console.log("This runs after 2 seconds");
}, 2000);
```

---

### ‚úÖ (f) Immediately Invoked Function Expression (IIFE)

(Runs immediately after creation)

```js
(function () {
  console.log("IIFE executed!");
})();
```

---

## üîπ 4. Important Concepts with Functions

1. **Default Parameters**

```js
function greet(name = "Guest") {
  console.log("Hello " + name);
}
greet();         // Hello Guest
greet("Kajal");  // Hello Kajal
```

2. **Rest Parameters**

```js
function sum(...numbers) {
  return numbers.reduce((a, b) => a + b, 0);
}
console.log(sum(1, 2, 3, 4)); // 10
```

3. **Return vs. Console**

* `return` ‚Üí sends value back to caller
* `console.log` ‚Üí just prints it on screen

------------------------------------------------------------------------------------------------------------------------------------------

## üîπ 5. Higher-Order Functions

Functions that take other functions as arguments or return functions.

```js
function calculate(x, y, operation) {
  return operation(x, y);
}
let result = calculate(5, 3, (a, b) => a + b);
console.log(result); // 8
```

---

üëâ In interviews, questions often come like:

* Difference between function declaration & expression:-Declaration is hoisted, expression is not.
* Arrow function vs normal function
* Callback & higher-order functions
* What is IIFE?
* Rest vs Spread with functions

------------------------------------------------------------------------------------------------------------------------------------------


Hosting:- JavaScript ‡§™‡§π‡§≤‡•á variables ‡§î‡§∞ functions ‡§ï‡•ã memory ‡§Æ‡•á‡§Ç allocate ‡§ï‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à, ‡§´‡§ø‡§∞ code execute ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§




---------------------------------------------------------------------------------------------------------------------------------------

