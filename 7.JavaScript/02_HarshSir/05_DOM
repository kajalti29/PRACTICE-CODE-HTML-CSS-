
---

## **1Ô∏è‚É£ What is DOM?**

* **DOM = Document Object Model**
* It is like a **map of your webpage** that JavaScript can use.
* Every HTML element becomes a **node** in a tree.
* You can **read, change, or delete** things on your page using JavaScript.

-------------------------------------------------------------------------------------------------------------------------------------------

## **2Ô∏è‚É£ How to access elements**

### a) By ID

```javascript
let heading = document.getElementById("myHeading");
heading.textContent = "Hello!";
```

### b) By Class

```javascript
let items = document.getElementsByClassName("item");
items[0].textContent = "First item changed";
```

### c) By Tag

```javascript
let paragraphs = document.getElementsByTagName("p");
paragraphs[0].textContent = "New paragraph";
```

### d) By querySelector

```javascript
let para = document.querySelector(".item");
para.textContent = "Changed using querySelector";
```

----------------------------------------------------------------------------------------------------------------------------------

## **3Ô∏è‚É£ How to change things**

1. **Change text**

```javascript
element.textContent = "New Text";
```

2. **Change HTML**

```javascript
element.innerHTML = "<p>New Paragraph</p>";
```

3. **Change style**

```javascript
element.style.color = "red";
```

4. **Change attributes**

```javascript
element.setAttribute("href", "https://google.com");
```

------------------------------------------------------------------------------------------------------------------------------------------

## **4Ô∏è‚É£ DOM Events**

* Events = things user does (click, hover, type)
* Example:

```javascript
document.getElementById("myButton").addEventListener("click", function() {
    alert("Button clicked!");
});
```

---------------------------------------------------------------------------------------------------------------------------------------



---# üîπ 1. `__proto__`

üëâ Har JavaScript object ke paas ek hidden property hoti hai `__proto__`, jo uske parent (prototype) object ko point karti hai.
Ye **link banata hai object aur uske parent ke beech**.

```js
let person = { name: "Kajal" };
console.log(person.__proto__);  
// Output ‚Üí Object.prototype
```

‚ö° Matlab: `person` object ka prototype hai `Object.prototype`.

-------------------------------------------------------------------------------------------------------------------------------

# üîπ 2. Prototype Chain

üëâ Jab aap kisi property/method ko access karte ho:

* Sabse pehle JavaScript **object khud ke andar dhundhta hai**.
* Agar nahi mila, to **uske prototype (`__proto__`) me dhundhta hai**.
* Ye process upar tak chalta hai ‚Üí isko **Prototype Chain** bolte hain.

### Example:

```js
let arr = [1, 2, 3];

console.log(arr.toString());  
// arr ke andar toString nahi hai,
// so JS goes to Array.prototype ‚Üí waha mil jata hai

console.log(arr.__proto__ === Array.prototype); // true
console.log(Array.prototype.__proto__ === Object.prototype); // true
console.log(Object.prototype.__proto__); // null (end of chain)
```

‚ö° Chain:
`arr ‚Üí Array.prototype ‚Üí Object.prototype ‚Üí null`

---------------------------------------------------------------------------------------------------------------------------------------
1Ô∏è‚É£ Array Destructuring (‡§è‡§∞‡•á ‡§°‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞‡§ø‡§Ç‡§ó):-

Array destructuring ‡§∏‡•á ‡§π‡§Æ array ‡§ï‡•á values ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á variables ‡§Æ‡•á‡§Ç assign ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

```js
let numbers = [10, 20, 30];

// Without destructuring
let a = numbers[0];
let b = numbers[1];

// With destructuring
let [x, y, z] = numbers;
console.log(x, y, z); // 10 20 30
----------------------------------------------------------------------------------------------------------------------------------------
2Ô∏è‚É£ Object Destructuring (‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§°‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞‡§ø‡§Ç‡§ó)

Object destructuring ‡§∏‡•á ‡§π‡§Æ object ‡§ï‡•á values ‡§ï‡•ã variables ‡§Æ‡•á‡§Ç assign ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§


let person = {
    name: "Kajal",
    age: 25
};

// With destructuring
let {name, age} = person;
console.log(name, age); // Kajal 25

---------------------------------------------------------------------------------------------------------------------------------------
3Ô∏è‚É£ Rest Operator (...) (‡§∞‡•á‡§∏‡•ç‡§ü ‡§ë‡§™‡§∞‡•á‡§ü‡§∞)


Rest operator ‡§¨‡§ö‡•Ä ‡§π‡•Å‡§à values ‡§ï‡•ã array ‡§Ø‡§æ object ‡§Æ‡•á‡§Ç collect ‡§ï‡§∞ ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
Destructuring ‡§î‡§∞ function parameters ‡§Æ‡•á‡§Ç use ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

Array Example:

let numbers = [1, 2, 3, 4, 5];
let [first, second, ...rest] = numbers;

console.log(first, second); // 1 2
console.log(rest);          // [3, 4, 5]

---------------------------------------------------------------------------------------------------------------------------------------
Object Example:

let person = {name: "Kajal", age: 25, city: "Delhi"};
let {name, ...other} = person;

console.log(name);  // Kajal
console.log(other); // { age: 25, city: "Delhi" }

---------------------------------------------------------------------------------------------------------------------------------------
4Ô∏è‚É£ Spread Operator (...) (‡§∏‡•ç‡§™‡•ç‡§∞‡•á‡§° ‡§ë‡§™‡§∞‡•á‡§ü‡§∞)

Spread operator array ‡§Ø‡§æ object ‡§ï‡•ã expand ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

‡§á‡§∏‡•á copy, merge ‡§Ø‡§æ values pass ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

Array Example:

let arr1 = [1, 2, 3];
let arr2 = [4, 5, 6];

let combined = [...arr1, ...arr2];
console.log(combined); // [1, 2, 3, 4, 5, 6]

---------------------------------------------------------------------------------------------------------------------------------------
Object Example:
let obj1 = {a: 1, b: 2};
let obj2 = {c: 3, d: 4};

let merged = {...obj1, ...obj2};
console.log(merged); // {a:1, b:2, c:3, d:4}

---------------------------------------------------------------------------------------------------------------------------------------

## IIFE ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

IIFE ‡§è‡§ï ‡§ê‡§∏‡§æ function ‡§π‡•à ‡§ú‡•ã create ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§§‡•Å‡§∞‡§Ç‡§§ execute ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

2Ô∏è‚É£ Syntax:-
(function() {
    // code here
})();
---------------------------------------------------------------------------------------------------------------------------------------

Arrow function:-
(() => {
    console.log("IIFE executed!");
})();

---------------------------------------------------------------------------------------------------------------------------------------
3Ô∏è‚É£ Example 1: Simple IIFE

(function() {
    console.log("Hello from IIFE!");
})();

Output:
Hello from IIFE!

---------------------------------------------------------------------------------------------------------------------------------------

4Ô∏è‚É£ Example 2: IIFE with Parameters

(function(name) {
    console.log("Hello " + name + "!");
})("Kajal");

## Output:
Hello Kajal!
---------------------------------------------------------------------------------------------------------------------------------------