
## 1. Promise kya hai?

ЁЯСЙ **Promise ek JavaScript object hai jo future me ek value dene ka vada karta hai.**
Ye value abhi turant available bhi ho sakti hai, ya thodi der baad (asynchronous).

Jaise real life me:

* Tumne online order kiya (Promise ban gaya тЬЕ)
* Courier wala 2-3 din me delivery karega (Pending тП│)
* Jab delivery mil gayi тЖТ **Resolved (Fulfilled)** ЁЯША
* Agar product deliver nahi hua (ya kharab hua) тЖТ **Rejected** ЁЯШЮ

---

## 2. Promise ke states (3 hote hai):

1. **Pending** тЖТ Promise abhi chal raha hai, result nahi aaya
2. **Resolved (Fulfilled)** тЖТ Result aa gaya, success
3. **Rejected** тЖТ Error aa gaya

---

## 3. Syntax:

```javascript
let myPromise = new Promise((resolve, reject) => {
    // async kaam
    if (/* success */) {
        resolve("Success value");
    } else {
        reject("Error aaya");
    }
});
```

* `resolve()` тЖТ jab kaam sahi ho jaye
* `reject()` тЖТ jab kaam me error ho jaye

---

## 4. Use kaise karte hai?

```javascript
myPromise.then((value) => {
    console.log("Success:", value);
}).catch((error) => {
    console.log("Error:", error);
});
```

* `.then()` тЖТ jab promise **resolve** ho jaye
* `.catch()` тЖТ jab promise **reject** ho jaye

---

## 5. Tumhare example se samjho:

```javascript
let P1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("Resolve after 2 seconds");
        resolve(56);
    }, 2000);
});

P1.then((value) => {
    console.log(value);
});
```

### Step by Step Execution:

1. `new Promise(...)` banta hai тЖТ **Pending** state me hai
2. `setTimeout` chala тЖТ 2 sec wait karega
3. 2 sec baad тЖТ `"Resolve after 2 seconds"` print karega aur `resolve(56)` call hoga
4. Ab promise **Resolved** ho gaya тЖТ value `56` pass hogi
5. `.then()` wala code chalega тЖТ `56` print hoga

### Output:

```
Resolve after 2 seconds
56
```

---



рдареАрдХ рд╣реИ ЁЯСН рдЪрд▓реЛ **JavaScript Promise API** рдХреЛ рдЕрдЪреНрдЫреЗ рд╕реЗ рд╕рдордЭрддреЗ рд╣реИрдВред

---

## ЁЯФ╣ Promise рдХреНрдпрд╛ рд╣реИ?

Promise JavaScript рдХрд╛ **asynchronous programming** handle рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рд╣реИред
рдпрд╣ рдХрд┐рд╕реА async operation (рдЬреИрд╕реЗ API call, file read, timer) рдХрд╛ **result future рдореЗрдВ рджреЗрдЧрд╛** тАУ success (resolve) рдпрд╛ failure (reject)ред

Promise рдХреЗ рддреАрди states рд╣реЛрддреЗ рд╣реИрдВ:

1. **Pending** тЖТ рд╢реБрд░реВ рд╣реБрдЖ рд╣реИ рдкрд░ рдЦрддреНрдо рдирд╣реАрдВ рд╣реБрдЖред
2. **Fulfilled (Resolved)** тЖТ Successfully complete рд╣реБрдЖред
3. **Rejected** тЖТ Error рдЖ рдЧрдпрд╛ рдпрд╛ fail рд╣реЛ рдЧрдпрд╛ред

---

## ЁЯФ╣ Promise рдмрдирд╛рдирд╛

```js
let promise = new Promise((resolve, reject) => {
    let success = true;

    if (success) {
        resolve("тЬЕ Operation Successful");
    } else {
        reject("тЭМ Operation Failed");
    }
});
```

---

## ЁЯФ╣ Promise API Methods

### 1. **`.then()`**

* рдЬрдм promise **resolve** рд╣реЛрддрд╛ рд╣реИ рддрдм рдЪрд▓рддрд╛ рд╣реИред

```js
promise.then(result => {
    console.log(result);  // тЬЕ Operation Successful
});
```

---

### 2. **`.catch()`**

* рдЬрдм promise **reject** рд╣реЛрддрд╛ рд╣реИ рддрдм рдЪрд▓рддрд╛ рд╣реИред

```js
promise.catch(error => {
    console.log(error);  // тЭМ Operation Failed
});
```

---

### 3. **`.finally()`**

* рдЪрд╛рд╣реЗ resolve рд╣реЛ рдпрд╛ reject, рдпрд╣ рд╣рдореЗрд╢рд╛ рдЪрд▓реЗрдЧрд╛ред

```js
promise.finally(() => {
    console.log("Promise finished (success or failure)");
});
```

---

### 4. **`Promise.all([ ... ])`**

* Multiple promises рдХреЛ parallel рдЪрд▓рд╛рддрд╛ рд╣реИред
* **рд╕рднреА resolve рд╣реЛрдиреЗ рдкрд░ рд╣реА resolve рд╣реЛрддрд╛ рд╣реИ**, рдПрдХ рднреА reject рд╣реБрдЖ рддреЛ рдкреВрд░рд╛ rejectред

```js
let p1 = Promise.resolve("P1 done");
let p2 = Promise.resolve("P2 done");
let p3 = Promise.resolve("P3 done");

Promise.all([p1, p2, p3])
    .then(values => console.log(values)) // ["P1 done", "P2 done", "P3 done"]
    .catch(err => console.log(err));
```

---

### 5. **`Promise.allSettled([ ... ])`**

* рд╕рднреА promises рдХреЗ settle рд╣реЛрдиреЗ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░рддрд╛ рд╣реИ (рдЪрд╛рд╣реЗ resolve рд╣реЛ рдпрд╛ reject)ред
* рд╣рдореЗрд╢рд╛ result рджреЗрддрд╛ рд╣реИред

```js
let p1 = Promise.resolve("P1 success");
let p2 = Promise.reject("P2 failed");

Promise.allSettled([p1, p2]).then(results => console.log(results));
```

ЁЯСЙ Output:

```js
[
  { status: "fulfilled", value: "P1 success" },
  { status: "rejected", reason: "P2 failed" }
]
```

---

### 6. **`Promise.race([ ... ])`**

* рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ complete рд╣реЛрдиреЗ рд╡рд╛рд▓рд╛ promise result рджреЗрдЧрд╛ (resolve/reject)ред

```js
let p1 = new Promise(res => setTimeout(() => res("P1 done"), 1000));
let p2 = new Promise(res => setTimeout(() => res("P2 done"), 500));

Promise.race([p1, p2]).then(value => console.log(value)); // "P2 done"
```

---

### 7. **`Promise.any([ ... ])`**

* рдкрд╣рд▓рд╛ **resolve** рд╣реЛрдиреЗ рд╡рд╛рд▓рд╛ promise result рджреЗрдЧрд╛ред
* рдЕрдЧрд░ рд╕рд╛рд░реЗ reject рд╣реЛ рдЧрдП рддреЛ `AggregateError` рджреЗрдЧрд╛ред

```js
let p1 = Promise.reject("Fail 1");
let p2 = Promise.resolve("Success 2");
let p3 = Promise.resolve("Success 3");

Promise.any([p1, p2, p3]).then(value => console.log(value)); // "Success 2"
```

---

тЬЕ Summary:

* `.then()` тЖТ success handle
* `.catch()` тЖТ error handle
* `.finally()` тЖТ always run
* `Promise.all` тЖТ all resolve required
* `Promise.allSettled` тЖТ wait for all (resolve/reject)
* `Promise.race` тЖТ first finished promise
* `Promise.any` тЖТ first success

---

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЛрдЧреЗ рдореИрдВ рдЖрдкрдХреЛ **Promise API рдХрд╛ рдПрдХ real-world example (рдЬреИрд╕реЗ API call / fetch example)** рднреА рдмрдирд╛рдХрд░ рджреВрдБ?
