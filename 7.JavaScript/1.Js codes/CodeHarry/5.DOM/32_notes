‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤ üëç ‡§ö‡§≤‡§ø‡§è **Advanced JavaScript / Modern JS** ‡§ï‡•á ‡§Ø‡•á ‡§∏‡§¨ topics **step by step, simple ‡§î‡§∞ detailed** ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç‡•§

---

## 1Ô∏è‚É£ **ES6+ Features**

### a) `let` ‡§î‡§∞ `const`

* **let**: Block-scoped variable, value ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§
* **const**: Block-scoped, value ‡§¨‡§¶‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§ï‡§§‡•Ä‡•§

```javascript
let x = 10;
x = 20; // ‡§∏‡§π‡•Ä

const y = 30;
y = 40; // ‚ùå Error
```

---

### b) Arrow Functions

* Short syntax function ‡§ï‡§æ‡•§ `this` keyword lexical scope ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§

```javascript
// Normal function
function add(a, b) {
    return a + b;
}

// Arrow function
const add = (a, b) => a + b;

console.log(add(2, 3)); // 5
```

---

### c) Template Literals

* Strings ‡§Æ‡•á‡§Ç variables ‡§î‡§∞ expressions embed ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§∏‡§æ‡§®‡•§
* Backticks `` ` `` use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

```javascript
const name = "Kajal";
console.log(`Hello ${name}, welcome!`); 
// Output: Hello Kajal, welcome!
```

---

### d) Destructuring

* Arrays ‡§Ø‡§æ Objects ‡§∏‡•á values ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ ‡§Ü‡§∏‡§æ‡§®‡•§

```javascript
// Array destructuring
const arr = [1, 2, 3];
const [a, b] = arr;
console.log(a, b); // 1 2

// Object destructuring
const person = {name: "Kajal", age: 20};
const {name, age} = person;
console.log(name, age); // Kajal 20
```

---

## 2Ô∏è‚É£ **Modules (import / export)**

* Code ‡§ï‡•ã ‡§õ‡•ã‡§ü‡•á-‡§õ‡•ã‡§ü‡•á files ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§Å‡§ü‡§®‡§æ‡•§
* Export: ‡§ï‡§ø‡§∏‡•Ä file ‡§∏‡•á function, variable ‡§Ø‡§æ class ‡§¨‡§æ‡§π‡§∞ ‡§≠‡•á‡§ú‡§®‡§æ‡•§
* Import: ‡§ï‡§ø‡§∏‡•Ä file ‡§Æ‡•á‡§Ç ‡§â‡§∏‡•á ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§®‡§æ‡•§

```javascript
// utils.js
export function add(a, b) {
    return a + b;
}

// app.js
import { add } from './utils.js';
console.log(add(5, 10)); // 15
```

---

## 3Ô∏è‚É£ **Promises**

* Async operations handle ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ‡•§
* 3 states: **pending, resolved, rejected**

```javascript
const myPromise = new Promise((resolve, reject) => {
    let success = true;
    if(success) resolve("Done");
    else reject("Error");
});

myPromise.then((value) => console.log(value)) // Done
         .catch((err) => console.log(err));
```

---

## 4Ô∏è‚É£ **Async / Await**

* Promises ‡§ï‡•ã ‡§Ü‡§∏‡§æ‡§® syntax ‡§Æ‡•á‡§Ç handle ‡§ï‡§∞‡§®‡§æ‡•§

```javascript
function fetchData() {
    return new Promise((resolve) => {
        setTimeout(() => resolve("Data received"), 2000);
    });
}

async function getData() {
    const data = await fetchData();
    console.log(data);
}

getData(); // 2 seconds ‡§¨‡§æ‡§¶: Data received
```

---

## 5Ô∏è‚É£ **Fetch API / Axios**

* **Fetch API**: Browser ‡§Æ‡•á‡§Ç HTTP requests ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ‡•§

```javascript
fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => response.json())
    .then(data => console.log(data));
```

* **Axios**: Fetch ‡§∏‡•á ‡§Ü‡§∏‡§æ‡§® ‡§î‡§∞ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ features (npm install axios)

```javascript
import axios from 'axios';

axios.get('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => console.log(response.data));
```

---

## 6Ô∏è‚É£ **Event Loop**

* JavaScript **single-threaded** ‡§π‡•à‡•§
* **Call Stack** ‡§î‡§∞ **Task Queue** ‡§ï‡§æ ‡§ï‡§æ‡§Æ‡•§
* Async operations (setTimeout, fetch) **event loop** ‡§∏‡•á handle ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

```javascript
console.log("Start");

setTimeout(() => {
    console.log("Timeout");
}, 0);

console.log("End");

// Output:
// Start
// End
// Timeout
```

---

## 7Ô∏è‚É£ **Closures**

* Function + ‡§â‡§∏‡§ï‡•á surrounding scope ‡§ï‡§æ combination‡•§
* Inner function outer function ‡§ï‡•á variables access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

```javascript
function outer() {
    let count = 0;
    return function inner() {
        count++;
        console.log(count);
    }
}

const counter = outer();
counter(); // 1
counter(); // 2
```

---

## 8Ô∏è‚É£ **Hoisting**

* JavaScript ‡§Æ‡•á‡§Ç **var ‡§î‡§∞ function declarations** ‡§ä‡§™‡§∞ ‡§Ü ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§

```javascript
console.log(a); // undefined
var a = 5;

foo(); // Hello
function foo() {
    console.log("Hello");
}
```

* **let/const** hoisting ‡§Æ‡•á‡§Ç **temporal dead zone** ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§

```javascript
console.log(b); // ‚ùå Error
let b = 10;
```

---

## 9Ô∏è‚É£ **this keyword**

* **Global scope:** window/global object
* **Object method:** ‡§â‡§∏ object ‡§ï‡•ã refer ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
* **Arrow function:** lexical scope (parent ‡§ï‡§æ this)

```javascript
const obj = {
    name: "Kajal",
    sayName: function() {
        console.log(this.name);
    }
};

obj.sayName(); // Kajal
```

---
